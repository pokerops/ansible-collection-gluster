---
- name: Override gluster volumes state to stopped
  hosts: "gluster_server:gluster_client"
  gather_facts: false
  tasks:
    - name: Set gluster volumes
      ansible.builtin.set_fact:
        gluster_volumes:
          - name: test
            brick: /data/test
            mount: /mnt/test
            paths:
              - a
              - b
              - c
            state: stopped

- name: Import geo replication install playbook
  ansible.builtin.import_playbook: pokerops.gluster.install

- name: Verify gluster volumes status
  hosts: "gluster_server_primary"
  become: true
  gather_facts: false
  tasks:
    - name: Get gluster geo replication status
      ansible.builtin.shell: |
        gluster volume geo-replication status | awk \
        'NR>3 {print "{\"server\": \"" $1 "\", \"volume\": \"" $2 "\", \"replica\": \"" $5 "\", \"status\": \"" $7"\"}"}'
      args:
        chdir: "/usr/sbin/"
      register: _georeplica_status
      changed_when: false
      tags: skip_ansible_lint

    - name: Set georeplication session status
      ansible.builtin.set_fact:
        _gluster_georeplica_volumes: "{{ _output }}"
      vars:
        _output: "{{ _georeplica_status.stdout_lines | default([]) | map('from_json') }}"

    - name: Debug gluster volumes
      ansible.builtin.debug:
        msg: "{{ gluster_volumes }}"

    - name: Debug gluster geo replication volume status
      ansible.builtin.debug:
        msg: "{{ _gluster_georeplica_volumes }}"

    - name: Verify gluster geo replication session status
      ansible.builtin.assert:
        that: _query_volumes | length == 0
      vars:
        _existing: "{{ _gluster_georeplica_volumes }}"
        _volumes: "{{ gluster_volumes }}"
        _stop_volumes: "{{ _volumes | selectattr('state', 'equalto', 'stopped') }}"
        _volume_names: "{{ _stop_volumes | map(attribute='name') }}"
        _stop_existing: "{{ _existing | selectattr('status', 'equalto', 'Stopped') }}"
        _query_volumes: "{{ _stop_existing | rejectattr('volume', 'in', _volume_names) }}"

- name: Override gluster volumes state to present
  hosts: "gluster_server:gluster_client"
  gather_facts: false
  tasks:
    - name: Set gluster volumes
      ansible.builtin.set_fact:
        gluster_volumes:
          - name: test
            brick: /data/test
            mount: /mnt/test
            paths:
              - a
              - b
              - c

- name: Import geo replication install playbook
  ansible.builtin.import_playbook: pokerops.gluster.install

- name: Verify gluster volumes status
  hosts: "gluster_server_primary"
  become: true
  gather_facts: false
  tasks:
    - name: Get gluster geo replication status
      ansible.builtin.shell: |
        gluster volume geo-replication status | awk \
        'NR>3 {print "{\"server\": \"" $1 "\", \"volume\": \"" $2 "\", \"replica\": \"" $5 "\", \"status\": \"" $6"\"}"}'
      args:
        chdir: "/usr/sbin/"
      register: _georeplica_status
      changed_when: false
      tags: skip_ansible_lint

    - name: Set georeplication session status
      ansible.builtin.set_fact:
        _gluster_georeplica_volumes: "{{ _output }}"
      vars:
        _output: "{{ _georeplica_status.stdout_lines | default([]) | map('from_json') }}"

    - name: Debug gluster volumes
      ansible.builtin.debug:
        msg: "{{ gluster_volumes }}"

    - name: Debug gluster geo replication volume status
      ansible.builtin.debug:
        msg: "{{ _gluster_georeplica_volumes }}"

    - name: Verify gluster geo replication session status
      ansible.builtin.assert:
        that: _query_volumes | length == 0
      vars:
        _statuses:
          - "Active"
          - "Passive"
        _existing: "{{ _gluster_georeplica_volumes }}"
        _volumes: "{{ gluster_volumes | sort(attribute='name') }}"
        _replica_state_default: "present"
        _volumes_num: "{{ _volumes | length }}"
        _replica_state_default_map: "{{ [_replica_state_default] * _volumes_num | int }}"
        _replica_state_default_dict: "{{ _replica_state_default_map | map(_to_dict, 'state') }}"
        _volumes_list: "{{ _replica_state_default_dict | zip(_volumes) | map('combine') }}"
        _start_volumes: "{{ _volumes_list | selectattr('state', 'equalto', 'present') }}"
        _start_existing: "{{ _existing | selectattr('status', 'in', _statuses) }}"
        _volume_names: "{{ _start_volumes | map(attribute='name') }}"
        _query_volumes: "{{ _start_existing | rejectattr('volume', 'in', _volume_names) }}"

- name: Override gluster volumes state to absent
  hosts: "gluster_server:gluster_client"
  gather_facts: false
  tasks:
    - name: Set gluster volumes
      ansible.builtin.set_fact:
        gluster_volumes:
          - name: test
            brick: /data/test
            mount: /mnt/test
            paths:
              - a
              - b
              - c
            state: absent

- name: Import geo replication install playbook
  ansible.builtin.import_playbook: pokerops.gluster.install

- name: Verify gluster volumes status
  hosts: "gluster_server_primary"
  become: true
  gather_facts: false
  tasks:
    - name: Get gluster geo replication status
      ansible.builtin.shell: |
        gluster volume geo-replication status | awk \
        'NR>3 {print "{\"server\": \"" $1 "\", \"volume\": \"" $2 "\", \"replica\": \"" $5 "\", \"status\": \"" $6"\"}"}'
      args:
        chdir: "/usr/sbin/"
      register: _georeplica_status
      changed_when: false
      tags: skip_ansible_lint

    - name: Set georeplication session status
      ansible.builtin.set_fact:
        _gluster_georeplica_volumes: "{{ _output }}"
      vars:
        _output: "{{ _georeplica_status.stdout_lines | default([]) | map('from_json') }}"

    - name: Debug gluster volumes
      ansible.builtin.debug:
        msg: "{{ gluster_volumes }}"

    - name: Debug gluster geo replication volume status
      ansible.builtin.debug:
        msg: "{{ _gluster_georeplica_volumes }}"

    - name: Verify gluster geo replication session status
      ansible.builtin.assert:
        that: _delete_existing | length == 0
      vars:
        _existing: "{{ _gluster_georeplica_volumes }}"
        _volumes: "{{ gluster_volumes }}"
        _delete_volumes: "{{ _volumes | selectattr('state', 'equalto', 'absent') }}"
        _volume_names: "{{ _delete_volumes | map(attribute='name') }}"
        _delete_existing: "{{ _existing | rejectattr('volume', 'in', _volume_names) }}"

- name: Override gluster volumes facts
  hosts: "gluster_server:gluster_client"
  gather_facts: false
  tasks:
    - name: Set gluster volumes
      ansible.builtin.set_fact:
        gluster_volumes:
          - name: test
            brick: /data/test
            mount: /mnt/test
            paths:
              - a
              - b
              - c
          - name: bla
            brick: /data/bla
            mount: /mnt/bla
            paths:
              - a
              - b
              - c

- name: Import geo replication install playbook
  ansible.builtin.import_playbook: pokerops.gluster.install

- name: Test gluster failover to a different site
  hosts: "gluster_server:gluster_client"
  gather_facts: false
  tasks:
    - name: Set gluster primary facts
      ansible.builtin.set_fact:
        gluster_georeplica_manage: true
      when: inventory_hostname in groups['gluster_server_primary']

    - name: Set gluster replica facts
      ansible.builtin.set_fact:
        gluster_georeplica_manage: false
      when: inventory_hostname in groups['gluster_server_secondary']

- name: Import geo replication install playbook
  ansible.builtin.import_playbook: pokerops.gluster.install
  vars:
    gluster_server_groupset: georeplication

- name: Verify gluster volumes status
  hosts: "gluster_server_secondary"
  become: true
  gather_facts: false
  tasks:
    - name: Get gluster geo replication status
      ansible.builtin.shell: |
        gluster volume geo-replication status | awk \
        'NR>3 {print "{\"server\": \"" $1 "\", \"volume\": \"" $2 "\", \"replica\": \"" $5 "\", \"status\": \"" $6"\"}"}'
      args:
        chdir: "/usr/sbin/"
      register: _georeplica_status
      changed_when: false
      tags: skip_ansible_lint

    - name: Set georeplication session status
      ansible.builtin.set_fact:
        _gluster_georeplica_volumes: "{{ _output }}"
      vars:
        _output: "{{ _georeplica_status.stdout_lines | default([]) | map('from_json') }}"

    - name: Debug gluster volumes
      ansible.builtin.debug:
        msg: "{{ gluster_volumes }}"

    - name: Debug gluster geo replication volume status
      ansible.builtin.debug:
        msg: "{{ _gluster_georeplica_volumes }}"

    - name: Verify gluster geo replication session status
      ansible.builtin.assert:
        that: _query_volumes | length == 0
      vars:
        _statuses:
          - "Active"
          - "Passive"
        _existing: "{{ _gluster_georeplica_volumes }}"
        _volumes: "{{ gluster_volumes | sort(attribute='name') }}"
        _replica_state_default: "present"
        _volumes_num: "{{ _volumes | length }}"
        _replica_state_default_map: "{{ [_replica_state_default] * _volumes_num | int }}"
        _replica_state_default_dict: "{{ _replica_state_default_map | map(_to_dict, 'state') }}"
        _volumes_list: "{{ _replica_state_default_dict | zip(_volumes) | map('combine') }}"
        _start_volumes: "{{ _volumes_list | selectattr('state', 'equalto', 'present') }}"
        _start_existing: "{{ _existing | selectattr('status', 'in', _statuses) }}"
        _volume_names: "{{ _start_volumes | map(attribute='name') }}"
        _query_volumes: "{{ _start_existing | rejectattr('volume', 'in', _volume_names) }}"

- name: Import verify playbook
  ansible.builtin.import_playbook: ./verify.yml
  vars:
    gluster_log_file: "bla.log"
    gluster_masters: gluster_server_georeplication_master
    gluster_slaves: gluster_server_georeplication_slave
