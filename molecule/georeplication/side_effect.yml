---
- name: Override gluster volumes state to stopped
  hosts: "gluster_server:gluster_client"
  gather_facts: false
  tasks:
    - name: Set gluster volumes
      ansible.builtin.set_fact:
        gluster_volumes:
          - name: test
            brick: /data/test
            mount: /mnt/test
            paths:
              - a
              - b
              - c
            state: stopped

- name: Import geo replication playbook
  ansible.builtin.import_playbook: pokerops.gluster.georeplication.stop

- name: Verify gluster volumes status
  hosts: "gluster_server"
  become: true
  gather_facts: false
  any_errors_fatal: true
  tasks:
    - name: Group slave members
      ansible.builtin.group_by:
        key: "gluster_slaves_delete"
      when:
        - gluster_georeplica_manage | default('false') | bool
        - inventory_hostname == (gluster_target_members | first)
      changed_when: false

    - name: Run master tasks
      when: not gluster_georeplica_manage | default('false') | bool
      block:
        - name: Get gluster geo replication status
          pokerops.gluster.georeplication.status:
            user: "{{ _gluster_user }}"
          vars:
            _gluster_user: "{{ _gluster_georeplica_user.name }}"
          register: _georeplica_status
          changed_when: false

        - name: Set georeplication session status
          ansible.builtin.set_fact:
            _gluster_georeplica_volumes: "{{ _sessions | selectattr('secondary_volume', 'in', _target_volumes) }}"
          vars:
            _volumes: "{{ gluster_volumes }}"
            _target_volumes: "{{ _volumes | map(attribute='name') }}"
            _sessions: "{{ _georeplica_status.result | default([]) | flatten }}"

        - name: Debug gluster volumes
          ansible.builtin.debug:
            msg: "{{ gluster_volumes }}"

        - name: Debug gluster geo replication volume status
          ansible.builtin.debug:
            msg: "{{ _gluster_georeplica_volumes }}"

        - name: Verify gluster geo replication session status
          ansible.builtin.assert:
            that: (_query_volumes | length | int) == (_replicas_num | int)
          vars:
            _slaves: "{{ groups['gluster_slaves_delete'] }}"
            _replicas_num: "{{ (_slaves | length) * (_volume_names | length) }}"
            _existing: "{{ _gluster_georeplica_volumes }}"
            _volumes: "{{ gluster_volumes }}"
            _stop_volumes: "{{ _volumes | selectattr('state', 'equalto', 'stopped') }}"
            _volume_names: "{{ _stop_volumes | map(attribute='name') }}"
            _stop_existing: "{{ _existing | selectattr('status', 'equalto', 'Stopped') }}"
            _query_volumes: "{{ _stop_existing | selectattr('secondary_volume', 'in', _volume_names) }}"

- name: Override gluster volumes state to present
  hosts: "gluster_server:gluster_client"
  gather_facts: false
  tasks:
    - name: Set gluster volumes
      ansible.builtin.set_fact:
        gluster_volumes:
          - name: test
            brick: /data/test
            mount: /mnt/test
            paths:
              - a
              - b
              - c

- name: Import geo replication playbook
  ansible.builtin.import_playbook: pokerops.gluster.georeplication.start

- name: Verify gluster volumes status
  hosts: "gluster_server"
  become: true
  gather_facts: false
  any_errors_fatal: true
  tasks:
    - name: Group slave members
      ansible.builtin.group_by:
        key: "gluster_slaves_start"
      when:
        - gluster_georeplica_manage | default('false') | bool
        - inventory_hostname == (gluster_target_members | first)
      changed_when: false

    - name: Run master tasks
      when: not gluster_georeplica_manage | default('false') | bool
      block:
        - name: Get gluster geo replication status
          pokerops.gluster.georeplication.status:
            user: "{{ _gluster_user }}"
          vars:
            _gluster_user: "{{ _gluster_georeplica_user.name }}"
          register: _georeplica_status
          changed_when: false

        - name: Set georeplication session status
          ansible.builtin.set_fact:
            _gluster_georeplica_volumes: "{{ _sessions | selectattr('secondary_volume', 'in', _target_volumes) }}"
          vars:
            _volumes: "{{ gluster_volumes }}"
            _target_volumes: "{{ _volumes | map(attribute='name') }}"
            _sessions: "{{ _georeplica_status.result | default([]) | flatten }}"

        - name: Debug gluster volumes
          ansible.builtin.debug:
            msg: "{{ gluster_volumes }}"

        - name: Debug gluster geo replication volume status
          ansible.builtin.debug:
            msg: "{{ _gluster_georeplica_volumes }}"

        - name: Verify gluster geo replication session status
          ansible.builtin.assert:
            that: (_query_volumes | length | int) == (_replicas_num | int)
          vars:
            _slaves: "{{ groups['gluster_slaves_start'] }}"
            _replicas_num: "{{ (_slaves | length) * (_volume_names | length) }}"
            _statuses:
              - "Active"
              - "Passive"
            _existing: "{{ _gluster_georeplica_volumes }}"
            _volumes: "{{ gluster_volumes | sort(attribute='name') }}"
            _replica_state_default: "present"
            _volumes_num: "{{ _volumes | length }}"
            _replica_state_default_map: "{{ [_replica_state_default] * _volumes_num | int }}"
            _replica_state_default_dict: "{{ _replica_state_default_map | map(_to_dict, 'state') }}"
            _volumes_list: "{{ _replica_state_default_dict | zip(_volumes) | map('combine') }}"
            _start_volumes: "{{ _volumes_list | selectattr('state', 'equalto', 'present') }}"
            _start_existing: "{{ _existing | selectattr('status', 'in', _statuses) }}"
            _volume_names: "{{ _start_volumes | map(attribute='name') }}"
            _query_volumes: "{{ _start_existing | selectattr('secondary_volume', 'in', _volume_names) }}"

- name: Override gluster volumes state to absent
  hosts: "gluster_server:gluster_client"
  gather_facts: false
  tasks:
    - name: Set gluster volumes
      ansible.builtin.set_fact:
        gluster_volumes:
          - name: test
            brick: /data/test
            mount: /mnt/test
            paths:
              - a
              - b
              - c
            state: absent

- name: Import geo replication playbook
  ansible.builtin.import_playbook: pokerops.gluster.georeplication.delete

- name: Verify gluster volumes status
  hosts: "gluster_server_primary"
  become: true
  gather_facts: false
  any_errors_fatal: true
  tasks:
    - name: Get gluster geo replication status
      pokerops.gluster.georeplication.status:
        user: "{{ _gluster_user }}"
      vars:
        _gluster_user: "{{ _gluster_georeplica_user.name }}"
      register: _georeplica_status
      changed_when: false

    - name: Set georeplication session status
      ansible.builtin.set_fact:
        _gluster_georeplica_volumes: "{{ _sessions | selectattr('secondary_volume', 'in', _target_volumes) }}"
      vars:
        _volumes: "{{ gluster_volumes }}"
        _target_volumes: "{{ _volumes | map(attribute='name') }}"
        _sessions: "{{ _georeplica_status.result | default([]) | flatten }}"

    - name: Debug gluster volumes
      ansible.builtin.debug:
        msg: "{{ gluster_volumes }}"

    - name: Debug gluster geo replication volume status
      ansible.builtin.debug:
        msg: "{{ _gluster_georeplica_volumes }}"

    - name: Verify gluster geo replication session status
      ansible.builtin.assert:
        that: _delete_existing | length == 0
      vars:
        _existing: "{{ _gluster_georeplica_volumes }}"
        _volumes: "{{ gluster_volumes }}"
        _delete_volumes: "{{ _volumes | selectattr('state', 'equalto', 'absent') }}"
        _volume_names: "{{ _delete_volumes | map(attribute='name') }}"
        _delete_names: "{{ _existing | selectattr('secondary_volume', 'defined') }}"
        _delete_existing: "{{ _delete_names | rejectattr('secondary_volume', 'in', _volume_names) }}"

- name: Override gluster volumes facts
  hosts: "gluster_server:gluster_client"
  gather_facts: false
  tasks:
    - name: Set gluster volumes
      ansible.builtin.set_fact:
        gluster_volumes:
          - name: test
            brick: /data/test
            mount: /mnt/test
            paths:
              - a
              - b
              - c
          - name: bla
            brick: /data/bla
            mount: /mnt/bla
            paths:
              - a
              - b
              - c

- name: Import geo replication playbook
  ansible.builtin.import_playbook: pokerops.gluster.install

- name: Test gluster failover to a different site
  hosts: "gluster_server:gluster_client"
  gather_facts: false
  tasks:
    - name: Set gluster slave facts
      ansible.builtin.set_fact:
        gluster_georeplica_manage: true
      when: |
        inventory_hostname in groups['gluster_server_primary'] or
        inventory_hostname in groups['gluster_client_primary'] or
        inventory_hostname in groups['gluster_client_tertiary'] or
        inventory_hostname in groups['gluster_server_tertiary']

    - name: Set gluster master facts
      ansible.builtin.set_fact:
        gluster_georeplica_manage: false
      when: |
        inventory_hostname in groups['gluster_client_secondary'] or
        inventory_hostname in groups['gluster_server_secondary']

    - name: Set gluster slave groupset facts
      ansible.builtin.set_fact:
        gluster_server_slave_groupset: primary
      when: |
        inventory_hostname in groups['gluster_server_primary'] or
        inventory_hostname in groups['gluster_client_primary']

- name: Import geo replication install playbook
  ansible.builtin.import_playbook: pokerops.gluster.install
  vars:
    gluster_server_prefix: gluster_server_georeplication

- name: Verify gluster volumes status
  hosts: "gluster_server"
  any_errors_fatal: true
  become: true
  gather_facts: false
  tasks:
    - name: Group slave members
      ansible.builtin.group_by:
        key: "gluster_slaves_failover"
      when:
        - gluster_georeplica_manage | default('false') | bool
        - inventory_hostname == (gluster_target_members | first)
      changed_when: false

    - name: Run master tasks
      when: not gluster_georeplica_manage | default('false') | bool
      block:
        - name: Get gluster geo replication status
          pokerops.gluster.georeplication.status:
            user: "{{ _gluster_user }}"
          vars:
            _gluster_user: "{{ _gluster_georeplica_user.name }}"
          register: _georeplica_status
          changed_when: false

        - name: Set georeplication session status
          ansible.builtin.set_fact:
            _gluster_georeplica_volumes: "{{ _sessions | selectattr('secondary_volume', 'in', _target_volumes) }}"
          vars:
            _volumes: "{{ gluster_volumes }}"
            _target_volumes: "{{ _volumes | map(attribute='name') }}"
            _sessions: "{{ _georeplica_status.result | default([]) | flatten }}"

        - name: Debug gluster volumes
          ansible.builtin.debug:
            msg: "{{ gluster_volumes }}"

        - name: Debug gluster geo replication volume status
          ansible.builtin.debug:
            msg: "{{ _gluster_georeplica_volumes }}"

        - name: Verify gluster geo replication session status
          ansible.builtin.assert:
            that: (_query_volumes | length | int) == (_replicas_num | int)
          vars:
            _slaves: "{{ groups['gluster_slaves_failover'] }}"
            _replicas_num: "{{ (_slaves | length) * (_volume_names | length) }}"
            _statuses:
              - "Active"
              - "Passive"
            _existing: "{{ _gluster_georeplica_volumes }}"
            _volumes: "{{ gluster_volumes | sort(attribute='name') }}"
            _replica_state_default: "present"
            _volumes_num: "{{ _volumes | length }}"
            _replica_state_default_map: "{{ [_replica_state_default] * _volumes_num | int }}"
            _replica_state_default_dict: "{{ _replica_state_default_map | map(_to_dict, 'state') }}"
            _volumes_list: "{{ _replica_state_default_dict | zip(_volumes) | map('combine') }}"
            _start_volumes: "{{ _volumes_list | selectattr('state', 'equalto', 'present') }}"
            _start_existing: "{{ _existing | selectattr('status', 'in', _statuses) }}"
            _volume_names: "{{ _start_volumes | map(attribute='name') }}"
            _query_volumes: "{{ _start_existing | selectattr('secondary_volume', 'in', _volume_names) }}"

- name: Override gluster server group fact
  hosts: "all"
  gather_facts: false
  tasks:
    - name: Set gluster server hostgroup fact
      ansible.builtin.set_fact:
        gluster_server_hostgroup_name: gluster_server_scaledown

- name: Import geo replication install playbook
  ansible.builtin.import_playbook: pokerops.gluster.install
  vars:
    gluster_server_prefix: gluster_server_scaledown

- name: Verify gluster volumes status
  hosts: "gluster_server"
  become: true
  any_errors_fatal: true
  gather_facts: false
  tasks:
    - name: Group slave members
      ansible.builtin.group_by:
        key: "gluster_slaves_scaledown_test"
      when:
        - gluster_georeplica_manage | default('false') | bool
        - inventory_hostname == (gluster_target_members | first)
      changed_when: false

    - name: Run master tasks
      when: not gluster_georeplica_manage | default('false') | bool
      block:
        - name: Get gluster geo replication status
          pokerops.gluster.georeplication.status:
            user: "{{ _gluster_user }}"
          vars:
            _gluster_user: "{{ _gluster_georeplica_user.name }}"
          register: _georeplica_status
          changed_when: false

        - name: Set georeplication session status
          ansible.builtin.set_fact:
            _gluster_georeplica_volumes: "{{ _sessions | selectattr('secondary_volume', 'in', _target_volumes) }}"
          vars:
            _volumes: "{{ gluster_volumes }}"
            _target_volumes: "{{ _volumes | map(attribute='name') }}"
            _sessions: "{{ _georeplica_status.result | default([]) | flatten }}"

        - name: Debug gluster volumes
          ansible.builtin.debug:
            msg: "{{ gluster_volumes }}"

        - name: Debug gluster geo replication volume status
          ansible.builtin.debug:
            msg: "{{ _gluster_georeplica_volumes }}"

        - name: Verify gluster geo replication session status
          ansible.builtin.assert:
            that: (_query_volumes | length | int) == (_replicas_num | int)
          vars:
            _slaves: "{{ groups['gluster_slaves_scaledown_test'] }}"
            _replicas_num: "{{ (_slaves | length) * (_volume_names | length) }}"
            _statuses:
              - "Active"
              - "Passive"
            _existing: "{{ _gluster_georeplica_volumes }}"
            _volumes: "{{ gluster_volumes | sort(attribute='name') }}"
            _replica_state_default: "present"
            _volumes_num: "{{ _volumes | length }}"
            _replica_state_default_map: "{{ [_replica_state_default] * _volumes_num | int }}"
            _replica_state_default_dict: "{{ _replica_state_default_map | map(_to_dict, 'state') }}"
            _volumes_list: "{{ _replica_state_default_dict | zip(_volumes) | map('combine') }}"
            _start_volumes: "{{ _volumes_list | selectattr('state', 'equalto', 'present') }}"
            _start_existing: "{{ _existing | selectattr('status', 'in', _statuses) }}"
            _volume_names: "{{ _start_volumes | map(attribute='name') }}"
            _query_volumes: "{{ _start_existing | selectattr('secondary_volume', 'in', _volume_names) }}"

- name: Import verify playbook
  ansible.builtin.import_playbook: ./verify.yml
  vars:
    gluster_log_file: "bla.log"
    gluster_masters: "gluster_server_scaledown_{{ gluster_server_master_groupset | default('master') }}"
    gluster_slaves: "gluster_server_scaledown_{{ gluster_server_slave_groupset | default('slave') }}"
    gluster_server_hostgroup: gluster_server_scaledown
    gluster_client_hostgroup: gluster_client_secondary
