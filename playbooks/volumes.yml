---
- name: Manage gluster volumes
  hosts: "{{ _gluster_server_hostgroup_name }}"
  become: true
  any_errors_fatal: true
  vars:
    _gluster_server_groupset: "{{ gluster_server_groupset | default('cluster') }}"
    _gluster_server_prefix: "{{ gluster_server_prefix | default('gluster_server') }}"
    _gluster_name: "{{ _gluster_server_prefix }}_{{ _gluster_server_groupset }}"
    _gluster_server_replica_groupset: "{{ gluster_server_replica_groupset | default('gluster_server_replica') }}"
    _gluster_server_primary_groupset: "{{ gluster_server_primary_groupset | default('gluster_server_primary') }}"
  vars_files:
    - ../vars/main.yml
  tasks:
    - name: Set volume facts
      ansible.builtin.set_fact:
        __gluster_volumes: "{{ _replica_query | ternary(_meta_volumes, _volumes) }}"
      vars:
        _volumes: "{{ _gluster_volumes }}"
        _meta_volumes: "{{ [gluster_meta_volume] + _volumes }}"
        _hosts: "{{ inventory_hostname in groups[_gluster_server_primary_groupset] }}"
        _replica_query: "{{ _hosts and _gluster_georeplica_manage }}"

    - name: Debug gluster volume
      ansible.builtin.debug:
        var: __gluster_volumes

    - name: Verify gluster meta volume facts
      ansible.builtin.assert:
        that:
          - _volume_query | length == 0
          - _brick_query | length == 0
          - _mount_query | length == 0
        fail_msg: "Gluster volumes cannot use geo replication meta volume facts"
      vars:
        _volumes: "{{ _gluster_volumes }}"
        _meta_volume: "{{ gluster_meta_volume }}"
        _volume_query: "{{ _volumes | selectattr('name', 'equalto', _meta_volume.name) }}"
        _brick_query: "{{ _volumes | selectattr('brick', 'equalto', _meta_volume.brick) }}"
        _mount_query: "{{ _volumes | selectattr('mount', 'equalto', _meta_volume.mount) }}"

    - name: Create brick paths
      ansible.builtin.file:
        path: "{{ item.brick }}"
        state: directory
      loop_control:
        label: "{{ item.brick }}"
      loop: "{{ __gluster_volumes }}"
      tags: skip_ansible_lint

    - name: Manage gluster volume tasks
      when: (inventory_hostname == (gluster_target_members | first))
      block:
        - name: Create gluster volumes
          gluster.gluster.gluster_volume:
            state: present
            name: "{{ _volume }}"
            bricks: "{{ _brick }}"
            cluster: "{{ gluster_target_members }}"
            force: true
            replicas: "{{ gluster_target_members | length }}"
            start_on_create: true
            options: "{{ _options }}"
          vars:
            _replica_enable: "{{ _gluster_georeplica_manage }}"
            _volume_query: "{{ (_volume != gluster_meta_volume.name) and (_replica_enable) }}"
            _options_default: { features.read-only: "off" }
            _options_replica: { features.read-only: "on" }
            _options_query: "{{ _options_replica if _volume_query else _options_default }}"
            _options: "{{ item.options | default(_options_query) }}"
            _brick: "{{ item.brick }}"
            _volume: "{{ item.name }}"
          loop_control:
            label: "{{ _volume }}"
          loop: "{{ __gluster_volumes }}"

        - name: Prune stale gluster peer members
          gluster.gluster.gluster_peer:
            state: absent
            nodes: "{{ _gluster_member_del }}"
            force: true
          changed_when: false
          when: _gluster_member_del | length > 0

    - name: Create mount directory
      ansible.builtin.file:
        path: "{{ item.mount }}"
        state: directory
      loop_control:
        label: "{{ item.name }} - {{ item.mount }}"
      loop: "{{ __gluster_volumes }}"
      tags: skip_ansible_lint

    - name: Create gluster mount source volume
      ansible.posix.mount:
        src: "localhost:/{{ _name }}"
        path: "{{ _path }}"
        fstype: glusterfs
        opts: "{{ _options }}"
        state: "mounted"
      vars:
        _name: "{{ item.name }}"
        _path: "{{ item.mount }}"
        _replica_manage: "{{ _gluster_georeplica_manage }}"
        _option_default: "{{ item.opts | default('defaults,rw') }}"
        _options: "{{ 'defaults,ro' if _replica_manage else _option_default }}"
      loop_control:
        label: "{{ _name }} - {{ _path }}"
      loop: "{{ __gluster_volumes }}"

    - name: Manage subdirectories
      ansible.builtin.file:
        dest: "{{ volume.mount }}/{{ path }}"
        owner: "{{ _gluster_owner_user }}"
        group: "{{ _gluster_owner_group }}"
        mode: "{{ _gluster_directory_mode | int }}"
        state: directory
      vars:
        volume: "{{ item.0 }}"
        path: "{{ item.1 }}"
      loop_control:
        label: "{{ volume.mount }} - {{ path }}"
      loop: "{{ __gluster_volumes | subelements('paths', skip_missing='yes') }}"
      when: inventory_hostname in groups[_gluster_server_primary_groupset]

    - name: Set delete gluster volumes facts
      ansible.builtin.set_fact:
        _gluster_volumes_delete: "{{ _volumes_delete }}"
      vars:
        _volumes: "{{ _gluster_volumes }}"
        _volumes_state: "{{ _volumes | selectattr('state', 'defined') }}"
        _volumes_delete: "{{ _volumes_state | selectattr('state', 'equalto', 'absent') }}"

    - name: End play when there are no gluster volumes to delete
      ansible.builtin.meta: end_play
      when: _gluster_volumes_delete | length == 0

    - name: Remove gluster mount source volume
      ansible.posix.mount:
        src: "localhost:/{{ _name }}"
        path: "{{ _path }}"
        fstype: glusterfs
        state: "absent"
      vars:
        _name: "{{ item.name }}"
        _path: "{{ item.mount }}"
      loop_control:
        label: "{{ _name }} - {{ _path }}"
      loop: "{{ _gluster_volumes_delete }}"

    - name: Delete gluster volumes
      gluster.gluster.gluster_volume:
        state: absent
        name: "{{ _volume }}"
      vars:
        _volume: "{{ item.name }}"
      loop_control:
        label: "{{ _volume }}"
      loop: "{{ _gluster_volumes_delete }}"
