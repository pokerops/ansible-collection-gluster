---
- name: Gather service facts
  ansible.builtin.service_facts:

- name: End play for offline hosts
  ansible.builtin.meta: end_host
  when: not gluster_service_name in services

- name: Query pool list
  pokerops.gluster.pool_list:
  register: _member_query
  changed_when: false

- name: End play when node is not member of cluster
  ansible.builtin.meta: end_host
  vars:
    _members_output: "{{ _member_query.results | default ([]) }}"
    _members: "{{ _members_output | map(attribute='hostname') }}"
    _existing_members: "{{ _members | map('regex_replace', 'localhost', inventory_hostname) }}"
  when: not inventory_hostname in _existing_members

- name: Manage gluster service
  ansible.builtin.service:
    name: "{{ gluster_service_name }}"
    state: "{{ gluster_service_state | default('started') }}"

- name: Query peer status
  pokerops.gluster.peer_status:
  vars:
    _output: "{{ _peer_query.results | default([]) | sort(attribute='hostname') }}"
    _members: "{{ _output | map(attribute='hostname') }}"
    _members_regex: "{{ _members | map('regex_replace', 'localhost', inventory_hostname) }}"
    _members_dict: "{{ _members_regex | map(_to_dict, 'hostname') }}"
    _members_overwritten: "{{ _output | zip(_members_dict) | map('combine') }}"
    _query: "{{ _members_overwritten | selectattr('connected', 'equalto', 'Connected') }}"
    _group: "{{ gluster_target_members }}"
  retries: "{{ _gluster_retries }}"
  delay: "{{ _gluster_delay }}"
  until: (_query | length) == (_group | length)
  register: _peer_query
  changed_when: false

- name: Verify volume statuses
  ansible.builtin.shell: gluster volume info {{ _volume }} | grep -i status
  args:
    chdir: "/usr/sbin/"
  vars:
    _volume: "{{ item.name }}"
    _query: "{{ _member_query.stdout }}"
    _status: "Status: Started"
  retries: "{{ _gluster_retries }}"
  delay: "{{ _gluster_delay }}"
  until: _status is search(_query)
  register: _member_query
  changed_when: false
  loop_control:
    label: "{{ _volume }}"
  loop: "{{ _gluster_volumes }}"
  tags: skip_ansible_lint
