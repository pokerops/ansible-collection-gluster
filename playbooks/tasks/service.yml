---
- name: Gather service facts
  ansible.builtin.service_facts:

- name: End play for offline hosts
  ansible.builtin.meta: end_host
  when: not gluster_service_name in services

- name: Query pool list
  ansible.builtin.shell: gluster pool list | awk '{print $2}'
  args:
    chdir: "/usr/sbin/"
  register: _member_query
  changed_when: false

- name: End play when node is not member of cluster
  ansible.builtin.meta: end_host
  vars:
    _members_output: "{{ _member_query.stdout_lines | reject('equalto', 'Hostname') }}"
    _existing_members: "{{ _members_output | map('regex_replace', 'localhost', inventory_hostname) }}"
  when: not inventory_hostname in _existing_members

- name: Manage gluster service
  ansible.builtin.service:
    name: "{{ gluster_service_name }}"
    state: "{{ gluster_service_state | default('started') }}"

- debug:
    msg: "{{ gluster_target_members }}"

- debug:
    msg: "{{ gluster_target_members | length - 1 }}"

- name: Query peer status
  ansible.builtin.shell: gluster peer status | grep -i state
  args:
    chdir: "/usr/sbin/"
  vars:
    _output: "{{ _peer_query.stdout_lines | default([]) }}"
    _query: "{{ _output | select('match', 'Connected') }}"
    _gluster_group: "{{ gluster_target_members }}"
  retries: "{{ _gluster_retries }}"
  delay: "{{ _gluster_delay }}"
  until: _query | length == ((_gluster_group | length | int) - 1)
  register: _peer_query
  changed_when: false

- name: Verify volume statuses
  ansible.builtin.shell: gluster volume info {{ _volume }} | grep -i status
  args:
    chdir: "/usr/sbin/"
  vars:
    _volume: "{{ item.name }}"
    _query: "{{ _member_query.stdout }}"
    _status: "Status: Started"
  retries: "{{ _gluster_retries }}"
  delay: "{{ _gluster_delay }}"
  until: _status is search(_query)
  register: _member_query
  changed_when: false
  loop_control:
    label: "{{ _volume }}"
  loop: "{{ gluster_volumes }}"
