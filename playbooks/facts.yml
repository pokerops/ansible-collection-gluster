---
- name: Set gluster members
  hosts: "{{ _gluster_server_hostgroup_name }}"
  become: true
  vars:
    _gluster_server_groupset: "{{ gluster_server_groupset | default('cluster') }}"
    _gluster_server_prefix: "{{ gluster_server_prefix | default('gluster_server') }}"
    _gluster_name: "{{ _gluster_server_prefix }}_{{ _gluster_server_groupset }}"
  vars_files:
    - ../vars/main.yml
  any_errors_fatal: true
  tasks:
    - name: End play when facts are not required
      ansible.builtin.meta: end_host
      when: not gluster_facts_manage | default('true') | bool

    - name: Group gluster members
      ansible.builtin.group_by:
        key: "{{ _gluster_name }}"
      changed_when: false

    - name: Gather service facts
      ansible.builtin.service_facts:

    - name: Manage gluster status check tasks
      when: gluster_service_name in services
      block:
        - name: Verify gluster service status
          ansible.builtin.assert:
            that: services[gluster_service_name].state | lower == 'running'

        - name: Query peer status
          ansible.builtin.shell: gluster peer status | grep -i state
          args:
            chdir: "/usr/sbin/"
          register: _peer_query
          changed_when: false
          tags: skip_ansible_lint

        - name: Verify gluster node status
          ansible.builtin.assert:
            that: _query | length == 0
          vars:
            _output: "{{ _peer_query.stdout_lines | default('') }}"
            _query: "{{ _output | reject('regex', 'Connected') }}"

        - name: Get gluster version
          ansible.builtin.shell: |
            gluster --version | head -1 | awk '{print $2}'
          args:
            chdir: "/usr/sbin/"
          register: _gluster_version
          changed_when: false
          loop: "{{ play_hosts }}"
          delegate_to: "{{ item }}"
          tags: skip_ansible_lint

        - name: Verify gluster version across geo replication members
          ansible.builtin.assert:
            that: _versions | length == 1
            fail_msg: "Gluster version must be the same across members"
          vars:
            _output: "{{ _gluster_version.results | default([]) }}"
            _versions: "{{ _output | map(attribute='stdout') | unique }}"

    - name: Group gluster server geo replication members
      ansible.builtin.group_by:
        key: "{{ _gluster_name }}_{{ 'slave' if _replica_manage else 'master' }}"
      vars:
        _replica_manage: "{{ _gluster_georeplica_manage }}"
      changed_when: false

    - name: Set gluster geo replication member facts
      ansible.builtin.set_fact:
        _gluster_server_masters: "{{ groups[_master_group] }}"
        _gluster_server_slaves: "{{ groups[_slave_group] }}"
      vars:
        _master_group: "{{ _gluster_name }}_master"
        _slave_group: "{{ _gluster_name }}_slave"

    - name: Debug gluster geo replication slave members
      ansible.builtin.debug:
        msg: "Gluster server slave {{ _slave_group }} members: [{{ _members | join(', ') }}]"
      vars:
        _members: "{{ _gluster_server_slaves }}"
        _slave_group: "{{ _gluster_name }}_slave"

    - name: Debug gluster geo replication master members
      ansible.builtin.debug:
        msg: "Gluster server master {{ _members }} members: [{{ _members | join(', ') }}]"
      vars:
        _members: "{{ _gluster_server_masters }}"
        _master_group: "{{ _master_name }}_slave"

    - name: Verify gluster georeplication hosts
      ansible.builtin.assert:
        that:
          - _gluster_server_masters | length > 0
          - _gluster_server_slaves | length > 0
      when: _gluster_georeplica_manage

    - name: Set gluster hosts fact
      ansible.builtin.set_fact:
        gluster_target_members: "{{ _gluster_target_members }}"
      vars:
        _replica_manage: "{{ _gluster_georeplica_manage }}"
        _target_group: "{{ _gluster_name }}_{{ 'slave' if _replica_manage else 'master' }}"
        _gluster_hosts: "{{ groups[_target_group] }}"
        _gluster_addrs: "{{ _gluster_hosts | map('extract', hostvars, gluster_address_attrs) }}"
        _gluster_target_members: "{{ _gluster_hosts if _gluster_hosts_manage else _gluster_addrs }}"

    - name: Verify gluster membership count
      ansible.builtin.assert:
        that: _members_num | length > 1
      vars:
        _members_num: "{{ gluster_target_members }}"

    - name: Query pool list
      ansible.builtin.shell: gluster pool list | awk '{print $2}'
      args:
        chdir: "/usr/sbin/"
      ignore_errors: true
      register: _member_query
      changed_when: false
      tags: skip_ansible_lint

    - name: Set gluster member facts
      ansible.builtin.set_fact:
        _gluster_alien: "{{ _is_alien | bool }}"
        _gluster_member: "{{ _is_member | bool }}"
        _gluster_member_del: "{{ _delete_members }}"
      vars:
        _status: "{{ _member_query }}"
        _status_error: "{{ _status.stderr | default('') }}"
        _has_failed: "{{ (_status_error is search('gluster: not found')) | bool }}"
        _members_output: "{{ _status.stdout_lines | default([]) | reject('equalto', 'Hostname') }}"
        _existing_members: "{{ _members_output | map('regex_replace', 'localhost', inventory_hostname) }}"
        _target_members: "{{ gluster_target_members }}"
        _is_alien: "{{ _has_failed or (_existing_members | length == 1) }}"
        _is_member: "{{ not _is_alien }}"
        _delete_members: "{{ _existing_members | reject('in', _target_members) }}"

    - name: Group gluster members
      ansible.builtin.group_by:
        key: "{{ _alien_group if _gluster_alien else _member_group }}"
      vars:
        _prefix: "{{ _gluster_name }}"
        _alien_group: "{{ _prefix }}_alien"
        _member_group: "{{ _prefix }}_member"
      changed_when: false

    - name: Set gluster member facts
      ansible.builtin.set_fact:
        _gluster_aliens: "{{ _aliens }}"
        _gluster_existing_members: "{{ _members }}"
      vars:
        _prefix: "{{ _gluster_name }}"
        _alien_group_name: "{{ _prefix }}_alien"
        _member_group_name: "{{ _prefix }}_member"
        _alien_group: "{{ groups[_alien_group_name] | default([]) }}"
        _members_group: "{{ groups[_member_group_name] | default([]) }}"
        _targets: "{{ gluster_target_members }}"
        _aliens: "{{ _alien_group | select('in', _targets) }}"
        _members: "{{ _members_group | select('in', _targets) }}"

    - name: Debug gluster target members
      ansible.builtin.debug:
        msg: "Target {{ _gluster_name }} gluster members: [{{ gluster_target_members | join(', ') }}]"

    - name: Debug gluster existing members
      ansible.builtin.debug:
        msg: "Existing {{ _gluster_name }} gluster members: [{{ _gluster_existing_members | join(', ') }}]"

    - name: Debug gluster member additions
      ansible.builtin.debug:
        msg: "New {{ _gluster_name }} gluster members: [{{ _gluster_aliens | join(', ') }}]"

    - name: Debug gluster member removals
      ansible.builtin.debug:
        msg: "Removing {{ _gluster_name }} gluster members: [{{ _gluster_member_del | join(', ') }}]"

- name: Set gluster volumes
  hosts: "{{ _gluster_server_hostgroup_name }}:{{ _gluster_client_hostgroup_name }}"
  vars:
    _gluster_server_groupset: "{{ gluster_server_groupset | default('cluster') }}"
    _gluster_server_prefix: "{{ gluster_server_prefix | default('gluster_server') }}"
    _gluster_name: "{{ _gluster_server_prefix }}_{{ _gluster_server_groupset }}"
  vars_files:
    - ../vars/main.yml
  tasks:
    - name: Set volume facts
      ansible.builtin.set_fact:
        _gluster_volumes: "{{ _target_volumes_overwritten }}"
        _gluster_server_slaves: "{{ groups[_slave_group] }}"
        _gluster_server_masters: "{{ groups[_master_group] }}"
      vars:
        _slave_group: "{{ _gluster_name }}_slave"
        _master_group: "{{ _gluster_name }}_master"
        _volume_defaults:
          state: present
        _volumes: "{{ _gluster_volumes_list | sort(attribute='name') }}"
        _meta_volumes: "{{ [gluster_meta_volume] + _volumes }}"
        _masters: "{{ groups[_master_group] | default([]) }}"
        _replica_manage: "{{ inventory_hostname in _masters }}"
        _target_volumes: "{{ _replica_manage | ternary(_meta_volumes, _volumes) }}"
        _volumes_num: "{{ _target_volumes | length }}"
        _volumes_default: "{{ [_volume_defaults] * _volumes_num | int }}"
        _target_volumes_overwritten: "{{ _volumes_default | zip(_target_volumes) | map('combine') }}"

    - name: Debug gluster volume
      ansible.builtin.debug:
        var: _gluster_volumes

    - name: Verify gluster volume facts
      ansible.builtin.assert:
        that: _gluster_volumes | length > 0

    - name: Verify gluster meta volume facts
      ansible.builtin.assert:
        that:
          - _volume_query | length == 0
          - _brick_query | length == 0
          - _mount_query | length == 0
          - _meta_volume_state | length == 0
        fail_msg: "Gluster volumes cannot use geo replication meta volume facts"
      vars:
        _volumes: "{{ _gluster_volumes_list }}"
        _meta_volume: "{{ gluster_meta_volume }}"
        _volume_query: "{{ _volumes | selectattr('name', 'equalto', _meta_volume.name) }}"
        _brick_query: "{{ _volumes | selectattr('brick', 'equalto', _meta_volume.brick) }}"
        _mount_query: "{{ _volumes | selectattr('mount', 'equalto', _meta_volume.mount) }}"
        _meta_volume_filter: "{{ _gluster_volumes | selectattr('name', 'equalto', _meta_volume.name) }}"
        _meta_volume_state: "{{ _meta_volume_filter | selectattr('state', 'equalto', 'absent') }}"

    - name: Set gluster facts
      ansible.builtin.set_fact:
        _to_dict: "nephelaiio.plugins.to_dict"
        _map_format: "nephelaiio.plugins.map_format"
        _select_attrs: "nephelaiio.plugins.select_attributes"
