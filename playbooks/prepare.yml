---
- name: Prepare gluster members
  hosts: "{{ _gluster_hostgroup_name }}"
  become: true
  vars_files:
    - ../vars/main.yml
  tasks:
    - name: Verify gluster variables
      ansible.builtin.assert:
        that:
          - _gluster_volumes | length > 0

    - name: Set gluster hosts fact
      ansible.builtin.set_fact:
        gluster_target_members: "{{ _gluster_target_members }}"
      vars:
        _map_format: "nephelaiio.plugins.map_format"
        _gluster_hosts: "{{ groups[_gluster_hostgroup_name] }}"
        _gluster_addrs: "{{ _gluster_hosts | map('extract', hostvars, gluster_address_attrs) }}"
        _gluster_target_members: "{{ _gluster_hosts if _gluster_hosts_manage else _gluster_addrs }}"

    - name: Gather service facts
      ansible.builtin.service_facts:

    - name: End play for offline hosts
      ansible.builtin.meta: end_host
      when:
        - gluster_service_name in services
        - services[gluster_service_name].state | lower != 'running'

    - name: Add host entries for cluster members
      ansible.builtin.lineinfile:
        path: /etc/hosts
        regexp: ".*{{ item }}.*"
        line: "{{ _member_address }} {{ _fqdn }} {{ _hostname }}"
      vars:
        _member_address: "{{ hostvars[item]['ansible_default_ipv4']['address'] }}"
        _fqdn: "{{ hostvars[item]['ansible_fqdn'] }}"
        _hostname: "{{ hostvars[item]['ansible_hostname'] }}"
      loop: "{{ gluster_target_members }}"

    - name: Query pool list
      ansible.builtin.shell: gluster pool list | awk '{print $2}'
      args:
        chdir: "/usr/sbin/"
      ignore_errors: true
      register: _member_query
      changed_when: false

    - name: Set gluster member facts
      ansible.builtin.set_fact:
        _gluster_alien: "{{ _is_alien | bool }}"
        _gluster_member: "{{ _is_member | bool }}"
        _gluster_member_del: "{{ _delete_members }}"
      vars:
        _status: "{{ _member_query }}"
        _has_failed: "{{ _status.failed | bool }}"
        _members_output: "{{ _status.stdout_lines | default([]) | reject('equalto', 'Hostname') }}"
        _existing_members: "{{ _members_output | map('regex_replace', 'localhost', inventory_hostname) }}"
        _target_members: "{{ gluster_target_members }}"
        _is_alien: "{{ _has_failed or (_existing_members | length == 1) }}"
        _is_member: "{{ not _is_alien }}"
        _delete_members: "{{ _existing_members | reject('in', _target_members) }}"

    - name: Group gluster members
      ansible.builtin.group_by:
        key: "{{ _alien_group if _gluster_alien else _member_group }}"
      vars:
        _suffix: "gluster_group"
        _alien_group: "{{ _suffix }}_alien"
        _member_group: "{{ _suffix }}_member"
      changed_when: false

    - name: Set gluster member facts
      ansible.builtin.set_fact:
        _gluster_aliens: "{{ groups[_alien_group] | default([]) }}"
        _gluster_existing_members: "{{ groups[_member_group] | default([]) }}"
      vars:
        _suffix: "gluster_group"
        _alien_group: "{{ _suffix }}_alien"
        _member_group: "{{ _suffix }}_member"

    - name: Debug gluster target members
      ansible.builtin.debug:
        msg: "Target gluster members: [{{ gluster_target_members | join(', ') }}]"

    - name: Debug gluster existing members
      ansible.builtin.debug:
        msg: "Existing gluster members: [{{ _gluster_existing_members | join(', ') }}]"

    - name: Debug gluster members additions
      ansible.builtin.debug:
        msg: "New gluster members: [{{ _gluster_aliens | join(', ') }}]"

    - name: Debug gluster member removals
      ansible.builtin.debug:
        msg: "Removing gluster members: [{{ _gluster_member_del | join(', ') }}]"
