---
- name: Load Gluster facts
  ansible.builtin.import_playbook: pokerops.gluster.facts
  vars:
    gluster_server_groupset: update

- name: Update gluster server slave members
  hosts: "{{ gluster_server_prefix | default('gluster_server') }}_update_slave:!{{ _gluster_update_skip_hostgroup }}"
  become: true
  serial: 1
  any_errors_fatal: true
  vars_files:
    - ../vars/main.yml
  vars:
    update_reboot: false
    update_cache_valid_time: 1
  roles:
    - pokerops.gluster.update
  pre_tasks:
    - name: Query pool list
      ansible.builtin.shell: gluster pool list | awk '{print $2}'
      args:
        chdir: "/usr/sbin/"
      register: _member_query
      changed_when: false
      tags: skip_ansible_lint

    - name: Verify gluster status
      ansible.builtin.assert:
        that: inventory_hostname in _existing_members
        fail_msg: "Gluster is in an inconsistent state"
      vars:
        _members_output: "{{ _member_query.stdout_lines | reject('equalto', 'Hostname') }}"
        _existing_members: "{{ _members_output | map('regex_replace', 'localhost', inventory_hostname) }}"

    - name: Query peer status
      ansible.builtin.shell: gluster peer status | grep -i state
      args:
        chdir: "/usr/sbin/"
      register: _peer_query
      changed_when: false
      tags: skip_ansible_lint

    - name: Verify gluster status
      ansible.builtin.assert:
        that: _query | length == (_group | length - 1)
        fail_msg: "Gluster node is in an inconsistent state"
      vars:
        _output: "{{ _peer_query.stdout_lines }}"
        _query: "{{ _output | select('regex', 'Connected') }}"
        _group: "{{ gluster_target_members }}"

    - name: Stop gluster service
      ansible.builtin.service:
        name: "{{ gluster_service_name }}"
        state: stopped

  tasks:
    - name: Reboot node
      ansible.builtin.reboot:
        reboot_timeout: "{{ gluster_reboot_timeout | default(300) }}"

    - name: Include service tasks
      ansible.builtin.include_tasks: tasks/service.yml
      vars:
        gluster_service_state: started

- name: Update gluster server master members
  hosts: "{{ gluster_server_prefix | default('gluster_server') }}_update_master:!{{ _gluster_update_skip_hostgroup }}"
  become: true
  serial: 1
  any_errors_fatal: true
  vars_files:
    - ../vars/main.yml
  vars:
    update_reboot: false
    update_cache_valid_time: 1
  roles:
    - pokerops.gluster.update
  pre_tasks:
    - name: Query pool list
      ansible.builtin.shell: gluster pool list | awk '{print $2}'
      args:
        chdir: "/usr/sbin/"
      register: _member_query
      changed_when: false
      tags: skip_ansible_lint

    - name: Verify gluster status
      ansible.builtin.assert:
        that: inventory_hostname in _existing_members
        fail_msg: "Gluster is in an inconsistent state"
      vars:
        _members_output: "{{ _member_query.stdout_lines | reject('equalto', 'Hostname') }}"
        _existing_members: "{{ _members_output | map('regex_replace', 'localhost', inventory_hostname) }}"

    - name: Query peer status
      ansible.builtin.shell: gluster peer status | grep -i state
      args:
        chdir: "/usr/sbin/"
      register: _peer_query
      changed_when: false
      tags: skip_ansible_lint

    - name: Verify gluster status
      ansible.builtin.assert:
        that: _query | length == (_group | length - 1)
        fail_msg: "Gluster node is in an inconsistent state"
      vars:
        _output: "{{ _peer_query.stdout_lines }}"
        _query: "{{ _output | select('regex', 'Connected') }}"
        _group: "{{ gluster_target_members }}"

    - name: Stop gluster service
      ansible.builtin.service:
        name: "{{ gluster_service_name }}"
        state: stopped

  tasks:
    - name: Reboot node
      ansible.builtin.reboot:
        reboot_timeout: "{{ gluster_reboot_timeout | default(300) }}"

    - name: Include service tasks
      ansible.builtin.include_tasks: tasks/service.yml
      vars:
        gluster_service_state: started

    - name: End play when there are no gluster server slaves
      ansible.builtin.meta: end_host
      vars:
        _slave_group: "{{ gluster_server_prefix | default('gluster_server') }}_update_slave"
        _slaves: "{{ groups[_slave_group] | default([]) }}"
      when: _slaves | length == 0

    - name: Get gluster geo replication status
      ansible.builtin.shell: |
        gluster volume geo-replication status | awk \
        'NR>3 {print "{\"server\": \"" $1 "\", \"volume\": \"" $2 "\", \"replica\": \"" $5 "\", \"status\": \"" $6"\"}"}'
      args:
        chdir: "/usr/sbin/"
      register: _georeplica_status
      changed_when: false
      tags: skip_ansible_lint

    - name: Set georeplication session status
      ansible.builtin.set_fact:
        _gluster_georeplica_sessions: "{{ _output | map('from_json') }}"
      vars:
        _output: "{{ _georeplica_status.stdout_lines | default([]) }}"

    - name: Debug gluster geo replication status
      ansible.builtin.debug:
        msg: "{{ _gluster_georeplica_sessions }}"

    - name: Verify gluster geo replication session status
      ansible.builtin.assert:
        that: _failing | length == 0
      vars:
        _sessions: "{{ _gluster_georeplica_sessions }}"
        _failing: "{{ _sessions | selectattr('status', 'equalto', 'Faulty') }}"

- name: Update gluster client members
  hosts: "{{ _gluster_client_hostgroup_name }}:!{{ _gluster_update_skip_hostgroup }}"
  become: true
  serial: 1
  any_errors_fatal: true
  vars_files:
    - ../vars/main.yml
  vars:
    update_reboot: false
    update_cache_valid_time: 1
  roles:
    - pokerops.gluster.update
  tasks:
    - name: Reboot node
      ansible.builtin.reboot:
        reboot_timeout: "{{ gluster_reboot_timeout | default(300) }}"

    - name: Verify gluster mount paths
      ansible.builtin.assert:
        that: _query | length == _defined_mounts | length
      vars:
        _defined_mounts: "{{ _gluster_volumes | map(attribute='mount') }}"
        _existing_mounts: "{{ ansible_mounts | map(attribute='mount') }}"
        _query: "{{ _defined_mounts | select('in', _existing_mounts) }}"
      register: _gluster_client_mounts
      retries: "{{ _gluster_retries }}"
      delay: "{{ _gluster_delay }}"
      until: _gluster_client_mounts is success
