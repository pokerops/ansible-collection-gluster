---
- name: Install gluster
  hosts: "{{ _gluster_hostgroup_name }}"
  become: true
  vars_files:
    - ../vars/main.yml
  tasks:
    - name: Create brick paths
      ansible.builtin.file:
        path: "{{ item.brick }}"
        state: directory
      loop_control:
        label: "{{ item.brick }}"
      loop: "{{ _gluster_volumes }}"

    - name: Install gluster server
      ansible.builtin.package:
        name: "{{ gluster_package_name }}"

    - name: Manage gluster service
      ansible.builtin.systemd:
        name: "{{ gluster_service_name }}"
        state: started
        enabled: true

    - name: Manage gluster peer members
      gluster.gluster.gluster_peer:
        state: present
        nodes: "{{ gluster_target_members }}"
      changed_when: false

    - name: Wait for gluster peers to be connected
      ansible.builtin.shell: gluster pool list | awk '{print $2}'
      args:
        chdir: "/usr/sbin/"
      vars:
        _status: "{{ _member_query }}"
        _members_output: "{{ _status.stdout_lines | reject('equalto', 'Hostname') }}"
        _existing_members: "{{ _members_output | map('regex_replace', 'localhost', inventory_hostname) }}"
      register: _member_query
      retries: "{{ _gluster_retries }}"
      delay: "{{ _gluster_delay }}"
      until: gluster_target_members | select('in', _existing_members)
      changed_when: false

    - name: Manage gluster brick tasks
      run_once: true
      block:
        - name: Manage gluster volumes
          gluster.gluster.gluster_volume:
            state: present
            name: "{{ _volume }}"
            bricks: "{{ _brick }}"
            cluster: "{{ gluster_target_members }}"
            force: true
            replicas: "{{ gluster_target_members | length }}"
            start_on_create: true
            options: "{{ item.options | default(omit) }}"
          vars:
            _brick: "{{ item.brick }}"
            _volume: "{{ item.name }}"
          loop_control:
            label: "{{ _volume }}"
          loop: "{{ _gluster_volumes }}"

        - name: Prune stale gluster peer members
          gluster.gluster.gluster_peer:
            state: absent
            nodes: "{{ _gluster_member_del }}"
            force: true
          changed_when: false
          when: _gluster_member_del | length > 0

    - name: Create mount directory
      ansible.builtin.file:
        path: "{{ item.mount }}"
        state: directory
      loop_control:
        label: "{{ item.name }} - {{ item.mount }}"
      loop: "{{ _gluster_volumes }}"

    - name: Mount gluster source volume
      ansible.builtin.mount:
        src: "localhost:/{{ item.name }}"
        path: "{{ item.mount }}"
        fstype: glusterfs
        opts: defaults
        state: mounted
      loop_control:
        label: "{{ item.name }} - {{ item.mount }}"
      loop: "{{ _gluster_volumes }}"

    - name: Manage subdirectories
      ansible.builtin.file:
        dest: "{{ volume.mount }}/{{ path }}"
        owner: "{{ _gluster_owner_user }}"
        group: "{{ _gluster_owner_group }}"
        mode: "{{ _gluster_directory_mode | int }}"
        state: directory
      vars:
        volume: "{{ item.0 }}"
        path: "{{ item.1 }}"
      loop_control:
        label: "{{ volume.mount }} - {{ path }}"
      loop: "{{ _gluster_volumes | subelements('paths', skip_missing='yes') }}"
