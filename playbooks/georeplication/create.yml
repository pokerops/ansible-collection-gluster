---
- name: Run Gluster facts
  ansible.builtin.import_playbook: pokerops.gluster.facts

- name: Manage geo replication mount broker tasks
  hosts: "{{ _gluster_georeplica_groupset }}"
  gather_facts: false
  become: true
  any_errors_fatal: true
  vars:
    _gluster_georeplica_groupset: "{{ gluster_georeplica_groupset | default('gluster_replication_hosts') }}"
    _gluster_primary_groupset: "{{ gluster_primary_groupset | default('gluster_primary_hosts') }}"
  vars_files:
    - ../../vars/main.yml
  tasks:
    - name: End play when gluster georeplication is not required
      ansible.builtin.meta: end_host
      when: not _gluster_georeplica_manage

    - name: Manage gluster replication member tasks
      run_once: true
      block:
        - name: Set georeplication facts
          ansible.builtin.set_fact:
            _gluster_user: "{{ _gluster_georeplica_user.name }}"
            _gluster_usergroup: "{{ _gluster_georeplica_group.name }}"

        - name: Verify existing gluster geo replication sessions
          delegate_to: "{{ groups[_gluster_primary_groupset] | first }}"
          block:
            - name: Get gluster geo replication status
              ansible.builtin.shell: |
                gluster volume geo-replication status | awk \
                'NR>3 {print "{\"server\": \"" $1 "\", \"volume\": \"" $2 "\", \"replica\": \"" $5 "\", \"status\": \"" $7"\"}"}'
              args:
                chdir: "/usr/sbin/"
              register: _georeplica_status
              changed_when: false

            - name: Set georeplication session status
              ansible.builtin.set_fact:
                _gluster_georeplica_sessions: "{{ _output | map('from_json') }}"
              vars:
                _output: "{{ _georeplica_status.stdout_lines | default([]) }}"
              delegate_facts: true
              delegate_to: localhost

            - name: Debug gluster geo replication status
              ansible.builtin.debug:
                msg: "{{ _sessions }}"
              vars:
                _sessions: "{{ hostvars['localhost']['_gluster_georeplica_sessions'] }}"

        - name: Set georeplication existing volumes fact
          ansible.builtin.set_fact:
            _gluster_georeplica_volumes: "{{ _missing_volumes }}"
          vars:
            _sessions: "{{ hostvars['localhost']['_gluster_georeplica_sessions'] }}"
            _existing_volumes: "{{ _sessions | map(attribute='replica') }}"
            _existing_split: "{{ _existing_volumes | map('split', '::') | map('last') | flatten }}"
            _volumes: "{{ _gluster_volumes }}"
            _missing_volumes: "{{ _volumes | rejectattr('name', 'in', _existing_split) }}"

        - name: Manage gluster mountbroker tasks
          when: _gluster_georeplica_volumes | length > 0
          block:
            - name: Setup gluster mountbroker
              ansible.builtin.shell: "gluster-mountbroker setup {{ _mount }} {{ _gluster_usergroup }}"
              args:
                chdir: "/usr/sbin/"
              vars:
                _mount: "{{ gluster_georeplica_mountbroker }}"
              register: _mount_broker_setup
              changed_when: false

            - name: Add gluster mountbroker volumes
              ansible.builtin.shell: "gluster-mountbroker add {{ _name }} {{ _gluster_user }}"
              args:
                chdir: "/usr/sbin/"
              vars:
                _name: "{{ item.name }}"
              loop: "{{ _gluster_volumes }}"
              loop_control:
                label: "{{ _name }}"
              register: _mount_broker_volumes
              changed_when: false

        - name: Get gluster mountbroker volume status
          ansible.builtin.shell: "gluster-mountbroker status | awk -F '|' '/{{ _broker_name }}/ {print $2 $4 $5}'"
          args:
            chdir: "/usr/sbin/"
          vars:
            _broker_path: "{{ gluster_georeplica_mountbroker }}"
            _broker_name: "{{ _broker_path | split('/') | last }}"
          register: _mount_broker_status
          changed_when: false

        - name: Debug gluster mountbroker volume status
          ansible.builtin.debug:
            msg: "{{ _members_split }}"
          vars:
            _status: "{{ _mount_broker_status.stdout_lines | default([]) }}"
            _members: "{{ _status | map('trim') | map('regex_replace', 'localhost', inventory_hostname) }}"
            _members_split: "{{ _members | map('split') | map('join', ' ') }}"

        - name: Verify gluster mountbroker volume status
          ansible.builtin.assert:
            that:
              - (_members | length) == (gluster_target_members | length)
              - _members | reject('match', 'OK') | length > 0
          vars:
            _status: "{{ _mount_broker_status.stdout_lines | default([]) }}"
            _members: "{{ _status | map('trim') | map('regex_replace', 'localhost', inventory_hostname) }}"

    - name: Set gluster replica volumes
      ansible.builtin.set_fact:
        _gluster_replica_volumes: "{{ _volumes_list }}"
        _gluster_georeplica_volumes: "{{ _gluster_georeplica_volumes }}"
      vars:
        _replica_member: "{{ groups[_gluster_georeplica_groupset] | sort | first }}"
        _volumes: "{{ _gluster_volumes | sort(attribute='name') }}"
        _volume_names: "{{ _volumes | map(attribute='name') }}"
        _volume_format: "{{ _volume_names | map(_map_format, _replica_member + '::%s') }}"
        _volume_dict: "{{ _volume_format | map(_to_dict, 'name') }}"
        _volumes_list: "{{ _volumes | zip(_volume_dict) | map('combine') }}"
      delegate_facts: true
      delegate_to: localhost

- name: Import gluster restart playbook tasks
  ansible.builtin.import_playbook: ../restart.yml
  any_errors_fatal: true
  vars:
    _gluster_replicas: "{{ gluster_georeplica_groupset | default('gluster_replication_hosts') }}"
    gluster_hostgroup_restart: "{{ groups[_gluster_replicas] }}"
    _gluster_georeplica_volumes: "{{ hostvars['localhost']['_gluster_georeplica_volumes'] }}"
  when:
    - _gluster_georeplica_manage
    - _gluster_georeplica_volumes | length > 0

- name: Create geo replication session tasks
  hosts: "{{ _gluster_primary_groupset }}"
  gather_facts: false
  any_errors_fatal: true
  become: true
  vars:
    _gluster_primary_groupset: "{{ gluster_primary_groupset | default('gluster_primary_hosts') }}"
    _gluster_georeplica_groupset: "{{ gluster_georeplica_groupset | default('gluster_replication_hosts') }}"
  vars_files:
    - ../../vars/main.yml
  tasks:
    - name: End play when gluster georeplication is not required
      ansible.builtin.meta: end_host
      when: not _gluster_georeplica_manage

    - name: Manage gluster replication member tasks
      run_once: true
      block:
        - name: Manage gluster geo replication ssh keys
          ansible.builtin.shell: |
            gluster-georep-sshkey generate | awk 'NR>4 {print last} {last=$0}' | awk \
            '{print "{\"server\": \"" $2 "\", \"node_status\": \"" $4 "\", \"keygen_status\": \"" $6"\"}"}'
          args:
            chdir: "/usr/sbin/"
          register: _georeplica_sshkey
          changed_when: false

        - name: Set gluster geo replication ssh keys status fact
          ansible.builtin.set_fact:
            _gluster_georeplica_sshkeys: "{{ _nodes_list }}"
          vars:
            _output: "{{ _georeplica_sshkey.stdout_lines | default([]) | map('from_json') }}"
            _nodes: "{{ _output | map(attribute='server') }}"
            _nodes_replace: "{{ _nodes | map('regex_replace', 'localhost', inventory_hostname) }}"
            _nodes_dict: "{{ _nodes_replace | map(_to_dict, 'server') }}"
            _nodes_list: "{{ _output | zip(_nodes_dict) | map('combine') }}"

        - name: Debug gluster geo replication ssh keys status
          ansible.builtin.debug:
            msg: "{{ _gluster_georeplica_sshkeys }}"

        - name: Verify gluster geo replication ssh keys status
          ansible.builtin.assert:
            that:
              - _node_status_failures | length == 0
              - _keygen_status_failures | length == 0
          vars:
            _keys: "{{ _gluster_georeplica_sshkeys }}"
            _node_status_failures: "{{ _keys | rejectattr('node_status', 'equalto', 'UP') }}"
            _keygen_status_failures: "{{ _keys | rejectattr('keygen_status', 'equalto', 'OK') }}"

        - name: Get gluster geo replication status
          ansible.builtin.shell: |
            gluster volume geo-replication status | awk \
            'NR>3 {print "{\"server\": \"" $1 "\", \"volume\": \"" $2 "\", \"replica\": \"" $5 "\", \"status\": \"" $7"\"}"}'
          args:
            chdir: "/usr/sbin/"
          register: _georeplica_status
          changed_when: false

        - name: Set georeplication session status
          ansible.builtin.set_fact:
            _gluster_georeplica_sessions: "{{ _output | map('from_json') }}"
          vars:
            _output: "{{ _georeplica_status.stdout_lines | default([]) }}"

        - name: Debug gluster geo replication status
          ansible.builtin.debug:
            msg: "{{ _gluster_georeplica_sessions }}"

        - name: Verify gluster geo replication session status
          ansible.builtin.assert:
            that: _failing | length == 0
          vars:
            _sessions: "{{ _gluster_georeplica_sessions }}"
            _failing: "{{ _sessions | selectattr('status', 'equalto', 'Faulty') }}"

        - name: Set georeplication facts
          ansible.builtin.set_fact:
            _gluster_user: "{{ _gluster_georeplica_user.name }}"
            _gluster_usergroup: "{{ _gluster_georeplica_group.name }}"
            _gluster_georeplica_volumes: "{{ _volumes }}"
          vars:
            _sessions: "{{ _gluster_georeplica_sessions }}"
            _existing_replicas: "{{ _sessions | map(attribute='volume') | unique }}"
            _primary_member: "{{ groups[_gluster_primary_groupset] | sort | first }}"
            _replica_volumes: "{{ hostvars['localhost']['_gluster_replica_volumes'] | sort(attribute='name') }}"
            _replica_names: "{{ _replica_volumes | map(attribute='name') }}"
            _replica_names_dict: "{{ _replica_names | map(_to_dict, 'replica_name') }}"
            _replicas_combine: "{{ _replica_volumes | zip(_replica_names_dict) | map('combine') }}"
            _primary_volumes: "{{ _gluster_volumes | sort(attribute='name') }}"
            _volumes_list: "{{ _replicas_combine | zip(_primary_volumes) | map('combine') }}"
            _volumes: "{{ _volumes_list | rejectattr('name', 'in', _existing_replicas) }}"

        - name: Debug gluster geo replication volumes to create a session
          ansible.builtin.debug:
            msg: "{{ _gluster_georeplica_volumes }}"

        - name: Manage geo replication session creation tasks
          when: _gluster_georeplica_volumes | length > 0
          block:
            - name: Create geo replication session
              ansible.builtin.shell: |
                gluster volume geo-replication {{ _primary }} \
                {{ _gluster_user }}@{{ _replica }} \
                create push-pem
              args:
                chdir: "/usr/sbin/"
              vars:
                _primary: "{{ item.name }}"
                _replica: "{{ item.replica_name }}"
              loop_control:
                label: "Primary: {{ _primary }} - Replica: {{ _replica }}"
              loop: "{{ _gluster_georeplica_volumes }}"
              register: _georeplica_create
              changed_when: false

            - name: Verify gluster geo replication session status
              ansible.builtin.assert:
                that: _status | rejectattr('stdout', 'match', '.*has been successful.*') | length == 0
              vars:
                _status: "{{ _georeplica_create.results | default([]) }}"

            - name: Get gluster geo replication status
              ansible.builtin.shell: |
                gluster volume geo-replication status | awk \
                'NR>3 {print "{\"server\": \"" $1 "\", \"volume\": \"" $2 "\", \"replica\": \"" $5 "\", \"status\": \"" $7"\"}"}'
              args:
                chdir: "/usr/sbin/"
              register: _georeplica_status
              changed_when: false

            - name: Set georeplication session status
              ansible.builtin.set_fact:
                _gluster_georeplica_sessions: "{{ _output | map('from_json') }}"
              vars:
                _output: "{{ _georeplica_status.stdout_lines | default([]) }}"

            - name: Debug gluster geo replication status
              ansible.builtin.debug:
                msg: "{{ _gluster_georeplica_sessions }}"

            - name: Verify gluster geo replication session status
              ansible.builtin.assert:
                that: _failing | length == 0
              vars:
                _sessions: "{{ _gluster_georeplica_sessions }}"
                _failing: "{{ _sessions | selectattr('status', 'equalto', 'Faulty') }}"

            - name: Manage gluster geo replication common key tasks
              delegate_to: "{{ groups[_gluster_georeplica_groupset] | first }}"
              block:
                - name: Wait for gluster common key replication
                  ansible.builtin.stat:
                    path: "{{ _path }}"
                  vars:
                    _home: "/home/{{ _gluster_user }}"
                    _path: "{{ _home }}/{{ _primary }}_{{ _replica }}_common_secret.pem.pub"
                    _primary: "{{ item.name }}"
                    _replica: "{{ item.replica_name }}"
                    _results: "{{ _georeplica_common_key.results | default([]) | map(attribute='stat') }}"
                    _status: "{{ _results | map(attribute='stat') }}"
                    _query: "{{ _status | rejectattr('exists') }}"
                  loop_control:
                    label: "Primary: {{ _primary }} - Replica: {{ _replica }}"
                  loop: "{{ _gluster_georeplica_volumes }}"
                  retries: "{{ _gluster_retries }}"
                  delay: "{{ _gluster_delay }}"
                  until: _query | length == 0
                  register: _georeplica_common_key

                - name: Execute gluster geo replication pem keys script
                  ansible.builtin.shell: |
                    {{ _script }} {{ _gluster_user }} {{ _primary }} {{ _replica }}
                  vars:
                    _script: "{{ gluster_georeplication_keys_script }}"
                    _primary: "{{ item.name }}"
                    _replica: "{{ item.replica_name | split('::') | last }}"
                  loop_control:
                    label: "Primary: {{ _primary }} - Replica: {{ _replica }}"
                  loop: "{{ _gluster_georeplica_volumes }}"
                  register: _georeplica_sshkeys_script
                  changed_when: false

            - name: Create geo replication session
              ansible.builtin.shell: |
                gluster volume geo-replication {{ _primary }} \
                {{ _gluster_user }}@{{ _replica }} \
                start
              args:
                chdir: "/usr/sbin/"
              vars:
                _primary: "{{ item.name }}"
                _replica: "{{ item.replica_name }}"
              loop_control:
                label: "Primary: {{ _primary }} - Replica: {{ _replica }}"
              loop: "{{ _gluster_georeplica_volumes }}"
              register: _georeplica_start
              changed_when: false

            - name: Verify gluster geo replication session start
              ansible.builtin.assert:
                that: _status | rejectattr('stdout', 'match', '.*has been successful.*') | length == 0
              vars:
                _status: "{{ _georeplica_start.results | default([]) }}"
