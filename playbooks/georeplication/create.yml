---
- name: Run Gluster facts
  ansible.builtin.import_playbook: pokerops.gluster.facts

- name: Manage geo replication mount broker tasks
  hosts: "{{ _gluster_georeplica_groupset }}"
  gather_facts: false
  become: true
  vars:
    _gluster_georeplica_groupset: "{{ gluster_georeplica_groupset | default('gluster_replication_hosts') }}"
  vars_files:
    - ../../vars/main.yml
  tasks:
    - name: End play when gluster georeplication is not required
      ansible.builtin.meta: end_host
      when: not _gluster_georeplica_manage

    - name: Manage gluster replication member tasks
      run_once: true
      block:
        - name: Set georeplication facts
          ansible.builtin.set_fact:
            _gluster_user: "{{ _gluster_georeplica_user.name }}"
            _gluster_usergroup: "{{ _gluster_georeplica_group.name }}"

        - name: Setup gluster mountbroker
          ansible.builtin.shell: "gluster-mountbroker setup {{ _mount }} {{ _gluster_usergroup }}"
          args:
            chdir: "/usr/sbin/"
          vars:
            _mount: "{{ gluster_georeplica_mountbroker }}"
          register: _mount_broker_setup
          changed_when: false

        - name: Add gluster mountbroker volumes
          ansible.builtin.shell: "gluster-mountbroker add {{ _name }} {{ _gluster_user }}"
          args:
            chdir: "/usr/sbin/"
          vars:
            _name: "{{ item.name }}"
          loop: "{{ _gluster_volumes }}"
          loop_control:
            label: "{{ _name }}"
          register: _mount_broker_volumes
          changed_when: false

        - name: Get gluster mountbroker volume status
          ansible.builtin.shell: "gluster-mountbroker status | awk -F '|' '/{{ _broker_name }}/ {print $2 $4 $5}'"
          args:
            chdir: "/usr/sbin/"
          vars:
            _broker_path: "{{ gluster_georeplica_mountbroker }}"
            _broker_name: "{{ _broker_path | split('/') | last }}"
          register: _mount_broker_status
          changed_when: false

        - name: Debug gluster mountbroker volume status
          ansible.builtin.debug:
            msg: "{{ _members_split }}"
          vars:
            _status: "{{ _mount_broker_status.stdout_lines | default([]) }}"
            _members: "{{ _status | map('trim') | map('regex_replace', 'localhost', inventory_hostname) }}"
            _members_split: "{{ _members | map('split') | map('join', ' ') }}"

        - name: Verify gluster mountbroker volume status
          ansible.builtin.assert:
            that:
              - (_members | length) == (gluster_target_members | length)
              - _members | reject('match', 'OK') | length > 0
          vars:
            _status: "{{ _mount_broker_status.stdout_lines | default([]) }}"
            _members: "{{ _status | map('trim') | map('regex_replace', 'localhost', inventory_hostname) }}"

    - name: Set gluster replica volumes
      ansible.builtin.set_fact:
        _gluster_replica_volumes: "{{ _volumes_list }}"
      vars:
        _replica_member: "{{ groups[_gluster_georeplica_groupset] | sort | first }}"
        _volumes: "{{ _gluster_volumes | sort(attribute='name') }}"
        _volume_names: "{{ _volumes | map(attribute='name') }}"
        _volume_format: "{{ _volume_names | map(_map_format, _replica_member + ':%s') }}"
        _volume_dict: "{{ _volume_format | map(_to_dict, 'name') }}"
        _volumes_list: "{{ _volumes | zip(_volume_dict) | map('combine') }}"
      delegate_facts: true
      delegate_to: localhost

- name: Import gluster restart playbook tasks
  ansible.builtin.import_playbook: ../restart.yml
  vars:
    _gluster_replicas: "{{ gluster_georeplica_groupset | default('gluster_replication_hosts') }}"
    gluster_hostgroup_restart: "{{ groups[_gluster_replicas] }}"
  when: _gluster_georeplica_manage

- name: Create geo replication session tasks
  hosts: "{{ _gluster_primary_groupset }}"
  gather_facts: false
  become: true
  vars:
    _gluster_primary_groupset: "{{ gluster_primary_groupset | default('gluster_primary_hosts') }}"
  vars_files:
    - ../../vars/main.yml
  tasks:
    - name: End play when gluster georeplication is not required
      ansible.builtin.meta: end_host
      when: not _gluster_georeplica_manage

    - name: Manage gluster replication member tasks
      run_once: true
      block:
        - name: Set georeplication facts
          ansible.builtin.set_fact:
            _gluster_user: "{{ _gluster_georeplica_user.name }}"
            _gluster_usergroup: "{{ _gluster_georeplica_group.name }}"
            _gluster_georeplica_volumes: "{{ _volumes }}"
          vars:
            _primary_member: "{{ groups[_gluster_primary_groupset] | sort | first }}"
            _replica_volumes: "{{ hostvars['localhost']['_gluster_replica_volumes'] | sort(attribute='name') }}"
            _replica_names: "{{ _replica_volumes | map(attribute='name') }}"
            _replica_names_dict: "{{ _replica_names | map(_to_dict, 'replica_name') }}"
            _replicas_combine: "{{ _replica_volumes | zip(_replica_names_dict) | map('combine') }}"
            _primary_volumes: "{{ _gluster_volumes | sort(attribute='name') }}"
            _volume_names: "{{ _primary_volumes | map(attribute='name') }}"
            _volume_format: "{{ _volume_names | map(_map_format, _primary_member + ':%s') }}"
            _volume_dict: "{{ _volume_format | map(_to_dict, 'name') }}"
            _volumes_list: "{{ _primary_volumes | zip(_volume_dict) | map('combine') }}"
            _volumes: "{{ _replicas_combine | zip(_volumes_list) | map('combine') }}"

        - name: Setup gluster mountbroker
          ansible.builtin.shell: "gluster-georep-sshkey generate"
          args:
            chdir: "/usr/sbin/"
          register: _georeplica_sshkey
          changed_when: false

        - debug:
            msg: "{{ _georeplica_sshkey }}"

        - debug:
            msg: "{{ _gluster_georeplica_volumes }}"

        - name: Create geo replication session
          gluster.gluster.geo_rep:
            action: create
            mastervol: "{{ _primary }}"
            slavevol: "{{ _replica }}"
            georepuser: "{{ _gluster_user }}"
            force: true
          vars:
            _primary: "{{ item.name }}"
            _replica: "{{ item.replica_name }}"
          loop_control:
            label: "Primary: {{ _primary }} - Replica: {{ _replica }}"
          loop: "{{ _gluster_georeplica_volumes }}"
          register: _georeplica_create

        - debug:
            msg: "{{ _georeplica_create }}"
