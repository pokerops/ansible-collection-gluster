---
- name: Load Gluster facts
  ansible.builtin.import_playbook: pokerops.gluster.facts
  vars:
    gluster_server_groupset: replica_start

- name: Get existing gluster geo replication volumes
  ansible.builtin.import_playbook: pokerops.gluster.georeplication.volumes

- name: Start geo replication session tasks
  hosts: "{{ gluster_server_prefix | default('gluster_server') }}_replica_start_master_all"
  gather_facts: false
  any_errors_fatal: true
  become: true
  vars_files:
    - ../../vars/main.yml
  tasks:
    - name: End play when gluster georeplication is not required
      ansible.builtin.meta: end_play
      vars:
        _replicas: "{{ _gluster_server_slaves_all | default([]) }}"
      when: _replicas | length == 0

    - name: End play for unrequired gluster geo replication nodes
      ansible.builtin.meta: end_host
      when: (not inventory_hostname == (gluster_target_members | first))

    - name: Get gluster geo replication status
      pokerops.gluster.georeplication.status:
        user: "{{ _gluster_user }}"
      register: _georeplica_status
      changed_when: false

    - name: Set georeplication session status
      ansible.builtin.set_fact:
        _gluster_georeplica_sessions: "{{ _output }}"
        _gluster_georeplica_volumes: "{{ _start_volumes }}"
      vars:
        _output: "{{ _georeplica_status.result | default([]) | flatten }}"
        _replicas: "{{ _output | rejectattr('status', 'in', gluster_georeplica_volumes_status) }}"
        _volume_names: "{{ _replicas | map(attribute='secondary_volume') | unique }}"
        _replica_names: "{{ _replicas | map(attribute='secondary') | unique }}"
        _replica_regex: "{{ _replica_names | map('regex_replace', '.*@', '') }}"
        _target_volumes: "{{ _gluster_target_volumes | sort(attribute='name') }}"
        _volumes: "{{ _target_volumes | selectattr('name', 'in', _volume_names) }}"
        _replica_targets: "{{ _volumes | selectattr('replica_name', 'in', _replica_regex) }}"
        _target_volume_names: "{{ _replica_targets | map(attribute='replica_name') }}"
        _volumes_regex: "{{ _target_volume_names | map('regex_replace', '::.*', '') }}"
        _target_volumes_dict: "{{ _volumes_regex | map(_to_dict, 'replica_name') }}"
        _target_volumes_overwritten: "{{ _replica_targets | zip(_target_volumes_dict) | map('combine') }}"
        _start_volumes: "{{ _target_volumes_overwritten | selectattr('state', 'equalto', 'present') }}"

    - name: Debug gluster geo replication status
      ansible.builtin.debug:
        msg: "{{ _gluster_georeplica_sessions }}"

    - name: Debug gluster geo replication volumes to start a session
      ansible.builtin.debug:
        msg: "{{ _gluster_georeplica_volumes }}"

    - name: End play when there are no geo replications to start
      ansible.builtin.meta: end_play
      when: _gluster_georeplica_volumes | length == 0

    - name: Verify gluster geo replication session status
      ansible.builtin.assert:
        that: _sessions | length > 0
      vars:
        _sessions: "{{ _gluster_georeplica_sessions }}"

    - name: Start gluster geo replication sessions
      pokerops.gluster.georeplication.start:
        volume: "{{ _volume }}"
        slave: "{{ _replica }}"
        user: "{{ _gluster_user }}"
        force: True
      vars:
        _volume: "{{ item.name }}"
        _replica: "{{ item.replica_name }}"
      loop_control:
        label: "Primary: {{ _volume }} - Replica: {{ _replica }}"
      loop: "{{ _gluster_georeplica_volumes }}"
      register: _georeplica_start
      changed_when: false

    - name: Verify gluster geo replication session status
      ansible.builtin.assert:
        that: _status | rejectattr('result', 'match', '.*has been successful.*') | length == 0
      vars:
        _status: "{{ _georeplica_start.results | default([]) }}"

    - name: Get gluster geo replication status
      pokerops.gluster.georeplication.status:
        user: "{{ _gluster_user }}"
      vars:
        _results: "{{ _georeplica_status.result | default([]) | flatten }}"
        _volumes: "{{ _gluster_georeplica_volumes | map(attribute='name') }}"
        _query_volumes: "{{ _results | selectattr('secondary_volume', 'in', _volumes) }}"
        _status: "{{ _query_volumes | rejectattr('status', 'in', gluster_georeplica_volumes_status) }}"
      register: _georeplica_status
      retries: "{{ _gluster_retries }}"
      delay: "{{ _gluster_delay }}"
      until: _status | length == 0
      changed_when: false

    - name: Set georeplication session status
      ansible.builtin.set_fact:
        _gluster_georeplica_sessions: "{{ _georeplica_status.result | default([]) | flatten }}"

    - name: Debug gluster geo replication status
      ansible.builtin.debug:
        msg: "{{ _gluster_georeplica_sessions }}"

    - name: Verify gluster geo replication session status
      ansible.builtin.assert:
        that: ((_start_volumes | length) == (_volumes | length))
      vars:
        _sessions: "{{ _gluster_georeplica_sessions }}"
        _volumes: "{{ _gluster_georeplica_volumes }}"
        _volume_names: "{{ _volumes | map(attribute='name') }}"
        _volumes_status: "{{ _sessions | selectattr('status', 'in', gluster_georeplica_volumes_status) }}"
        _volume_status_names: "{{ _volumes_status | map(attribute='secondary_volume') }}"
        _start_volumes: "{{ _volumes | selectattr('name', 'in', _volume_status_names) }}"
